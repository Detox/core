// Generated by LiveScript 1.5.0
/**
 * @package   Detox core
 * @author    Nazar Mokrynskyi <nazar@mokrynskyi.com>
 * @copyright Copyright (c) 2017, Nazar Mokrynskyi
 * @license   MIT License, see license.txt
 */
(function(){
  var detoxCrypto, lib, test, NUMBER_OF_NODES, bootstrap_ip, bootstrap_port;
  detoxCrypto = require('@detox/crypto');
  lib = require('..');
  test = require('tape');
  NUMBER_OF_NODES = 10;
  bootstrap_ip = '127.0.0.1';
  bootstrap_port = 16882;
  lib.ready(function(){
    test('Core', function(t){
      var bootstrap_node_info, nodes, i;
      t.plan(NUMBER_OF_NODES + 2);
      bootstrap_node_info = {
        node_id: Buffer(detoxCrypto.create_keypair(new Uint8Array(32)).ed25519['public']).toString('hex'),
        host: bootstrap_ip,
        port: bootstrap_port
      };
      nodes = [];
      i = 0;
      function start_node(){
        var x$, real_seed, y$, dht_seed, instance;
        x$ = real_seed = new Uint8Array(32);
        x$.set([i, 1]);
        y$ = dht_seed = new Uint8Array(32);
        y$.set([i]);
        if (i === 0) {
          instance = lib.Core(real_seed, dht_seed, [], [], 5, 3);
          instance.start_bootstrap_node(bootstrap_ip, bootstrap_port);
        } else {
          instance = lib.Core(real_seed, dht_seed, [bootstrap_node_info], [], 5);
        }
        instance.once('ready', function(){
          t.pass('Node ' + i + ' is ready');
          ++i;
          if (i < NUMBER_OF_NODES) {
            start_node();
          } else {
            ready_callback();
          }
        });
        nodes.push(instance);
      }
      start_node();
      function destroy_nodes(){
        var i$, ref$, len$, node;
        for (i$ = 0, len$ = (ref$ = nodes).length; i$ < len$; ++i$) {
          node = ref$[i$];
          node.destroy();
        }
      }
      function ready_callback(){
        var node_1, node_12, node_19;
        node_1 = nodes[1];
        node_12 = nodes[12];
        node_19 = nodes[19];
        t.deepEqual(node_1.get_bootstrap_nodes()[0], bootstrap_node_info, 'Bootstrap nodes are returned correctly');
        node_1.once('announced', function(){
          t.pass('Announced successfully');
          destroy_nodes();
        }).once('announcement_failed', function(reason){
          t.fail('Announcement failed with ' + reason);
          destroy_nodes();
        });
        console.log('Announcing...');
        node_1.announce(2, 1);
      }
    });
  });
}).call(this);
